<?php

namespace common\models\system;

use DateInterval;
use DateTime;
use Yii;
use yii\base\Exception;
use yii\behaviors\TimestampBehavior;
use yii\data\ActiveDataProvider;
use yii\db\BaseActiveRecord;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\web\Application;

/**
 * @property integer $id
 * @property string $code
 * @property string $name
 * @property string $status
 * @property string $position
 * @property integer $parent
 * @property AdminResource[] $resources
 */
class AdminRole extends _BaseModel
{
    protected $_translatedAttributes = ['name'];

    const STATUS_ENABLE = 'enable';
    const STATUS_DISABLE = 'disable';
    const CODE_SUPER_ADMIN = 'super_admin'; //Администратор
    const CODE_DEAN = 'dean'; //Факультет декани
    const CODE_TEACHER = 'teacher'; // Преподаватель
    const CODE_DEPARTMENT = 'department'; //Кафедра
    const CODE_STAFF = 'staff'; //Отдел кадров
    const CODE_DIRECTION = 'direction'; //Руководство
    const CODE_ACADEMIC = 'academic_board'; //Учебный отдель
    const CODE_MARKETING = 'marketing'; //Маркетинговый отдел
    const CODE_MIN_ADMIN = 'minadmin';
    const CODE_DOCTORATE = 'doctorate';
    const CODE_SCIENCE = 'science';
    const CODE_ACCOUNTING = 'accounting';
    const CODE_TUTOR = 'tutor';
    const CODE_FINANCE_CONTROL = 'finance_control';

    public $resourceIds = [];
    /**
     * @var AdminResource[]:
     */
    public $_resourcePaths = [];

    /**
     * @var AdminResource[]:
     */
    public $_resourceIds = [];

    public static function tableName()
    {
        return 'e_admin_role';
    }

    public static function getStatusOptions()
    {
        return [
            self::STATUS_ENABLE => __('Enable'),
            self::STATUS_DISABLE => __('Disable'),
        ];
    }

    public function getStatusLabel()
    {
        $labels = self::getStatusOptions();
        return isset($labels[$this->status]) ? $labels[$this->status] : '';
    }

    public static function getOptionsArray()
    {
        return ArrayHelper::map(self::find()->where(['status' => self::STATUS_ENABLE])->orderByTranslationField('name')->all(), 'id', 'name');
    }

    public static function getAllOptionsArray()
    {
        return ArrayHelper::map(self::find()->all(), 'id', 'name');
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return array_merge(parent::rules(), [
            [['resourceIds'], 'safe'],
            [['name', 'status'], 'required'],
            [['code'], 'unique'],
            [['code'], 'match', 'pattern' => '/^[a-z0-9_]{3,255}$/', 'message' => __('Use only alpha-number characters and underscore')],
        ]);
    }

    public function getResources()
    {
        return $this->hasMany(AdminResource::className(), ['id' => '_resource'])
            ->viaTable('e_admin_role_resource', ['_role' => 'id']);
    }

    public function beforeSave($insert)
    {
        if ($this->isSuperAdminRole()) {
            $this->status = self::STATUS_ENABLE;
        }

        if (!$this->isNewRecord)
            $this->touch('updated_at');

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        return parent::afterSave($insert, $changedAttributes);

        if (Yii::$app->has('request') && Yii::$app instanceof Application && count($_POST)) {
            $transaction = Yii::$app->db->beginTransaction();
            try {
                $this->unlinkAll('resources', true);
                if (is_array($this->resourceIds))
                    foreach ($this->resourceIds as $id) {
                        if ($resource = AdminResource::findOne($id)) {
                            $this->link('resources', $resource);
                        }
                    }
                $transaction->commit();
            } catch (\Exception $e) {
                $transaction->rollBack();
            }
        }
    }


    public function beforeDelete()
    {
        if ($this->isSuperAdminRole()) {
            throw new Exception(__('Can not delete [{code}] role', ['code' => $this->code]));
        }

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        foreach ($this->resources as $resource) {
            $this->_resourceIds[$resource->id] = $resource;
            $this->_resourcePaths[$resource->path] = $resource;
        }

        parent::afterFind(); // TODO: Change the autogenerated stub
    }


    public function search($params)
    {
        $this->load($params);

        $query = self::find();

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => [
                'defaultOrder' => ['position' => SORT_ASC],
                'attributes' => [
                    'name',
                    'code',
                    'position',
                    'status',
                    'created_at',
                ],
            ],
            'pagination' => [
                'pageSize' => 100,
            ],
        ]);

        if ($this->search) {
            $query->orWhereLike('name_uz', $this->search, '_translations');
            $query->orWhereLike('name_oz', $this->search, '_translations');
            $query->orWhereLike('name_ru', $this->search, '_translations');
            $query->orWhereLike('code', $this->search);
        }

        if ($this->status != -1) {
            $query->andFilterWhere(['status' => $this->status]);
        }

        return $dataProvider;
    }

    public function search_staff($params)
    {
        $this->load($params);

        $query = self::find();

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => [
                'defaultOrder' => ['position' => SORT_ASC],
                'attributes' => [
                    'name',
                    'code',
                    'position',
                    'status',
                    'created_at',
                ],
            ],
            'pagination' => [
                'pageSize' => 100,
            ],
        ]);

        if ($this->search) {
            $query->orWhereLike('name_uz', $this->search, '_translations');
            $query->orWhereLike('name_oz', $this->search, '_translations');
            $query->orWhereLike('name_ru', $this->search, '_translations');
            $query->orWhereLike('code', $this->search);
        }

        $query->andFilterWhere(['status' => AdminRole::STATUS_ENABLE]);
        $query->andFilterWhere(['not in', 'code', [self::CODE_SUPER_ADMIN, self::CODE_MIN_ADMIN]]);

        return $dataProvider;
    }

    public function search_faculty_member($params)
    {
        $this->load($params);

        $query = self::find();

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => [
                'defaultOrder' => ['position' => SORT_ASC],
                'attributes' => [
                    'name',
                    'code',
                    'position',
                    'status',
                    'created_at',
                ],
            ],
            'pagination' => [
                'pageSize' => 100,
            ],
        ]);

        if ($this->search) {
            $query->orWhereLike('name_uz', $this->search, '_translations');
            $query->orWhereLike('name_oz', $this->search, '_translations');
            $query->orWhereLike('name_ru', $this->search, '_translations');
            $query->orWhereLike('code', $this->search);
        }

        $query->andFilterWhere(['status' => AdminRole::STATUS_ENABLE]);
        $query->andFilterWhere(['in', 'code', [self::CODE_DEAN, self::CODE_STAFF]]);

        return $dataProvider;
    }

    public function isSuperAdminRole()
    {
        return $this->code == self::CODE_SUPER_ADMIN;
    }

    public function isMinAdminRole()
    {
        return $this->code == self::CODE_MIN_ADMIN;
    }

    public function isAcademic()
    {
        return $this->code == self::CODE_ACADEMIC;
    }

    public function isTeacherRole()
    {
        return $this->code == self::CODE_TEACHER;
    }

    public function isDeanRole()
    {
        return $this->code == self::CODE_DEAN;
    }

    public function isDeanOrTutorRole()
    {
        return $this->isDeanRole() || $this->isTutorRole();
    }

    public function isTutorRole()
    {
        return $this->code == self::CODE_TUTOR;
    }

    public function isHeadOfDepartmentRole()
    {
        return $this->code == self::CODE_DEPARTMENT;
    }

    public static function getSuperAdminRole()
    {
        return self::findOne(['code' => self::CODE_SUPER_ADMIN]);
    }

    public function getLabel()
    {
        return Html::encode($this->name ?: $this->code);
    }

    public function canAccessToResource($path)
    {
        if ($this->isSuperAdminRole()) {
            return true;
        }
        if (array_key_exists($path, $this->_resourcePaths)) {
            return $this->_resourcePaths[$path]->active;
        }

        if ($resource = AdminResource::findOne(['path' => $path])) {
            if ($resource->active) {
                return $resource->skip;
            }
        }


        return false;
    }

    public function hasResource(AdminResource $resource)
    {
        return array_key_exists($resource->id, $this->_resourceIds);
    }

}
