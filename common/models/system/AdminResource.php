<?php

namespace common\models\system;

use DateInterval;
use DateTime;
use Yii;
use yii\base\Exception;
use yii\behaviors\TimestampBehavior;
use yii\data\ActiveDataProvider;
use yii\db\BaseActiveRecord;

/**
 * @property integer $id
 * @property string $path
 * @property string $name
 * @property string $group
 * @property string $comment
 * @property boolean $active
 * @property boolean $skip
 * @property boolean $login
 * @property AdminRole[] $roles
 */
class AdminResource extends _BaseModel
{
    public $activated;
    public static $_resourcePaths;

    public static function tableName()
    {
        return 'e_admin_resource';
    }

    /**
     * @param $path
     * @return self | null
     */
    public static function getResourceByPath($path)
    {
        if (empty(self::$_resourcePaths)) {
            foreach (AdminResource::find()->all() as $resource) {
                self::$_resourcePaths[$resource->path] = $resource;
            }
        }

        return isset(self::$_resourcePaths[$path]) ? self::$_resourcePaths[$path] : null;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return array_merge(parent::rules(), [
            [['name', 'group', 'path'], 'required'],
            [['comment'], 'safe'],
        ]);
    }


    public function getRoles()
    {
        return $this->hasMany(AdminRole::className(), ['id' => '_role'])
            ->viaTable('e_admin_role_resource', ['_resource' => 'id']);
    }


    public function beforeSave($insert)
    {
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    public function beforeDelete()
    {

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


    public function searchForRole(AdminRole $role, $params)
    {
        $this->load($params);

        $query = self::find();

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => [
                'defaultOrder' => ['group' => SORT_ASC, 'path' => SORT_ASC],
                'attributes' => [
                    'id',
                    'name',
                    'group',
                    'path',
                    'created_at',
                    'updated_at',
                ],
            ],
            'pagination' => [
                'pageSize' => 500,
            ],
        ]);

        if ($this->search) {
            $query->orWhereLike('name', $this->search);
            $query->orWhereLike('path', $this->search);
        }

        $query->andFilterWhere(['skip' => false]);

        return $dataProvider;
    }

    public function search($params)
    {
        $this->load($params);

        $query = self::find();

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => [
                'defaultOrder' => ['group' => SORT_ASC, 'path' => SORT_ASC],
                'attributes' => [
                    'id',
                    'name',
                    'group',
                    'path',
                    'created_at',
                    'updated_at',
                ],
            ],
            'pagination' => [
                'pageSize' => 50,
            ],
        ]);

        if ($this->search) {
            $query->orWhereLike('name', $this->search);
            $query->orWhereLike('path', $this->search);
        }

        return $dataProvider;
    }

    public function getNameLabel()
    {
        return __($this->name);
    }

    public static function getRoleResources(AdminRole $role, $params = [])
    {

    }
}
