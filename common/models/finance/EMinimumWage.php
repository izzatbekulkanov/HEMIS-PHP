<?php

namespace common\models\finance;

use common\models\system\_BaseModel;
use common\models\system\Admin;
use common\models\system\AdminRole;
use DateTime;
use Yii;
use yii\data\ActiveDataProvider;
use yii\db\Expression;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "e_minimum_wage".
 *
 * @property int $id
 * @property float $name
 * @property string|null $begin_date
 * @property string|null $document
 * @property int|null $current_status
 * @property int|null $position
 * @property bool|null $active
 * @property string|null $_translations
 * @property string $updated_at
 * @property string $created_at
 *
 * @property EContractPrice[] $eContractPrices
 */
class EMinimumWage extends _BaseModel
{
    const STATUS_ENABLE = true;
    const STATUS_DISABLE = false;
    const CURRENT_STATUS = 1;
    const SCENARIO_CREATE = 'create';

    public static function tableName()
    {
        return 'e_minimum_wage';
    }

    public static function getStatusOptions()
    {
        return [
            self::STATUS_ENABLE => __('Enable'),
            self::STATUS_DISABLE => __('Disable'),
        ];
    }

    public static function getMinimumWageOptions()
    {
        return ArrayHelper::map(self::find()
            ->where(['active' => self::STATUS_ENABLE, 'current_status'=>self::CURRENT_STATUS])
            ->orderByTranslationField('name')
            ->all(), 'id', 'name');
    }

    public static function getCurrentMinimumWage()
    {
        return self::find()
            ->where(['active' => self::STATUS_ENABLE, 'current_status' => self::CURRENT_STATUS])
            ->one();
    }

    public function rules()
    {
        return array_merge(parent::rules(), [
            [['document', 'name', 'begin_date'], 'required', 'on' => self::SCENARIO_CREATE],
            [['name'], 'number'],
            [['begin_date', '_translations', 'updated_at', 'created_at'], 'safe'],
            [['current_status', 'position'], 'default', 'value' => null],
            [['current_status', 'position'], 'integer'],
            [['active'], 'boolean'],
            [['document'], 'string', 'max' => 1024],
        ]);
    }

    public function attributeLabels()
    {
        return array_merge(parent::attributeLabels(), [
            'document' => __('Document of Minimum Wage'),
            'name' => __('Amount of minimum wage'),
        ]);
    }

    public function getEContractPrices()
    {
        return $this->hasMany(EContractPrice::className(), ['_minimum_wage' => 'id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        if ($this->current_status) {
            $current = self::getCurrentMinimumWage();
            if ($current && $this->id != $current->id) {
                $current->updateAttributes(['current_status' => false]);
            }
        }
        parent::afterSave($insert, $changedAttributes);
    }

    public function beforeDelete()
    {
        if ($this->current_status) {
            throw new \Exception(__('Could not delete minimum wage with current status'));
        }

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function search($params)
    {
        $this->load($params);

        $query = self::find();

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => [
                'defaultOrder' => ['begin_date' => SORT_DESC],
                'attributes' => [
                    'id',
                    'name',
                    'document',
                    'position',
                    'begin_date',
                    'updated_at',
                    'created_at',
                ],
            ],
            'pagination' => [
                'pageSize' => 400,
            ],
        ]);

        if ($this->search) {
           // $query->orWhereLike('name_uz', $this->search, '_translations');
          //  $query->orWhereLike('name_oz', $this->search, '_translations');
          //  $query->orWhereLike('name_ru', $this->search, '_translations');
         //   $query->orWhereLike('name', $this->search);
        }
        return $dataProvider;
    }
}
