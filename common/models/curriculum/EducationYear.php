<?php

namespace common\models\curriculum;

use common\models\student\EStudentMeta;
use common\models\system\_BaseModel;
use common\models\system\classifier\SemestrType;
use DateInterval;
use DateTime;
use Yii;
use yii\base\Exception;
use yii\behaviors\TimestampBehavior;
use yii\console\controllers\MigrateController;
use yii\data\ActiveDataProvider;
use yii\db\BaseActiveRecord;
use yii\db\Expression;
use yii\db\Migration;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;

/**
 * This is the model class for table "h_education_year".
 *
 * @property string $code
 * @property string $name
 * @property int|null $current_status
 * @property string|null $_semestr_type
 * @property int|null $position
 * @property bool|null $active
 * @property string|null $_translations
 * @property string $updated_at
 * @property string $created_at
 *
 * @property \common\models\system\classifier\EducationYear $educationYear
 * @property ECurriculum[] $eCurriculums
 * @property EStudentMetum[] $eStudentMeta
 * @property HSemestrType $semestrType
 * @property HSemestr[] $hSemestrs
 */
class EducationYear extends _BaseModel
{
    const STATUS_ENABLE = true;
    const STATUS_DISABLE = false;
    const CURRENT_STATUS = 1;
    const SCENARIO_CREATE = 'create';

    protected $_translatedAttributes = ['name'];

    public static function tableName()
    {
        return 'e_education_year';
    }

    public static function getStatusOptions()
    {
        return [
            self::STATUS_ENABLE => __('Enable'),
            self::STATUS_DISABLE => __('Disable'),
        ];
    }

    public function getStatusLabel()
    {
        $labels = self::getStatusOptions();
        return isset($labels[$this->active]) ? $labels[$this->active] : '';
    }

    public static function getEducationYears()
    {
        return ArrayHelper::map(self::find()
            ->where(['active' => self::STATUS_ENABLE])
            ->addOrderBy(['code' => SORT_DESC])
            ->all(), 'code', 'name');
    }

    public static function getEducationFromCurrentYears()
    {
        return ArrayHelper::map(self::find()
            ->where(['active' => self::STATUS_ENABLE])
            ->andFilterWhere(['>=', 'code', date('Y')])
            ->orderByTranslationField('name')
            ->all(), 'code', 'name');
    }

    /**
     * @return EducationYear
     */
    public static function getCurrentYear()
    {
        return self::find()
            ->where(['active' => self::STATUS_ENABLE, 'current_status' => self::CURRENT_STATUS])
            ->one();
    }

    public function rules()
    {
        return array_merge(parent::rules(), [
            [['code'], 'required', 'on' => self::SCENARIO_CREATE],
            [['current_status', 'position'], 'default', 'value' => null],
            [['current_status', 'position'], 'integer'],
            [['active'], 'boolean'],
            [['name'], 'string', 'max' => 256],
            [['code'], 'unique'],
            [['code'], 'in', 'range' => array_keys(\common\models\system\classifier\EducationYear::getClassifierOptions())],
            [['_semestr_type'], 'exist', 'skipOnError' => true, 'targetClass' => SemestrType::className(), 'targetAttribute' => ['_semestr_type' => 'code']],
        ]);
    }

    public function getECurriculums()
    {
        return $this->hasMany(ECurriculum::className(), ['_education_year' => 'code']);
    }

    public function getEStudentMeta()
    {
        return $this->hasMany(EStudentMeta::className(), ['_education_year' => 'code']);
    }

    public function getSemestrType()
    {
        return $this->hasOne(SemestrType::className(), ['code' => '_semestr_type']);
    }

    public function getEducationYear()
    {
        return $this->hasOne(\common\models\system\classifier\EducationYear::className(), ['code' => 'code']);
    }

    public function getHSemestrs()
    {
        return $this->hasMany(Semestr::className(), ['_education_year' => 'code']);
    }

    public function beforeSave($insert)
    {
        $this->name = $this->educationYear ? $this->educationYear->name : '';

        return parent::beforeSave($insert);
    }

    public function afterSave($insert, $changedAttributes)
    {
        if ($this->current_status) {
            $current = self::getCurrentYear();
            if ($current && $this->code != $current->code) {
                $current->updateAttributes(['current_status' => false]);
            }
        }

        parent::afterSave($insert, $changedAttributes);
    }

    public function beforeDelete()
    {
        if ($this->current_status) {
            throw new \Exception(__('Could not delete education year with current status'));
        }

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


    public function search($params)
    {
        $this->load($params);

        $query = self::find();

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => [
                'defaultOrder' => ['code' => SORT_ASC],
                'attributes' => [
                    'name',
                    'code',
                    'position',
                    '_semestr_type',
                    'updated_at',
                    'created_at',
                ],
            ],
            'pagination' => [
                'pageSize' => 400,
            ],
        ]);

        if ($this->search) {
            $query->orWhereLike('name_uz', $this->search, '_translations');
            $query->orWhereLike('name_oz', $this->search, '_translations');
            $query->orWhereLike('name_ru', $this->search, '_translations');
            $query->orWhereLike('name', $this->search);
        }
        if ($this->_semestr_type) {
            $query->andFilterWhere(['_semestr_type' => $this->_semestr_type]);
        }

        return $dataProvider;
    }
}
